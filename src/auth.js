"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// inspired by https://github.com/parro-it/electron-google-oauth
const electron = require("electron");
const events = require("events");
const googleapis = require("googleapis");
const querystring = require("querystring");
const url = require("url");
const BW = process.type === 'renderer' ? electron.remote.BrowserWindow : electron.BrowserWindow;
class UserClosedWindowError extends Error {
    constructor() {
        super('User closed the window');
    }
}
exports.UserClosedWindowError = UserClosedWindowError;
/**
 * Tokens updated event
 *
 * @event ElectronGoogleOAuth2#tokens
 * @type {Credentials}
 */
/**
 * Handle Google Auth processes through Electron.
 * This class automatically renews expired tokens.
 * @fires ElectronGoogleOAuth2#tokens
 */
class ElectronGoogleOAuth2 extends events.EventEmitter {
    /**
     * Create a new instance of ElectronGoogleOAuth2
     * @param {string} clientId - Google Client ID
     * @param {string} clientSecret - Google Client Secret
     * @param {string[]} scopes - Google scopes. 'profile' and 'email' will always be present
     * @param {string} redirectUri - defaults to 'urn:ietf:wg:oauth:2.0:oob'
     */
    constructor(clientId, clientSecret, scopes, redirectUri = 'urn:ietf:wg:oauth:2.0:oob') {
        super();
        // Force fetching id_token if not provided
        if (!scopes.includes('profile'))
            scopes.push('profile');
        if (!scopes.includes('email'))
            scopes.push('email');
        this.scopes = scopes;
        this.oauth2Client = new googleapis.google.auth.OAuth2(clientId, clientSecret, redirectUri);
        this.oauth2Client.on('tokens', (tokens) => {
            this.emit('tokens', tokens);
        });
    }
    /**
     * Returns authUrl generated by googleapis
     * @param {boolean} forceAddSession
     * @returns {string}
     */
    generateAuthUrl(forceAddSession = false) {
        let url = this.oauth2Client.generateAuthUrl({
            access_type: 'offline',
            scope: this.scopes,
        });
        if (forceAddSession) {
            const qs = querystring.stringify({ continue: url });
            url = `https://accounts.google.com/AddSession?${qs}`;
        }
        return url;
    }
    /**
     * Get authorization code for underlying authUrl
     * @param {boolean} forceAddSession
     * @returns {Promise<string>}
     */
    getAuthorizationCode(forceAddSession = false) {
        const url = this.generateAuthUrl(forceAddSession);
        return this.openAuthWindowAndGetAuthorizationCode(url);
    }
    /**
     * Get authorization code for given url
     * @param {string} urlParam
     * @returns {Promise<string>}
     */
    openAuthWindowAndGetAuthorizationCode(urlParam) {
        return new Promise((resolve, reject) => {
            const win = new BW({
                useContentSize: true,
                fullscreen: false,
            });
            win.loadURL(urlParam);
            win.on('closed', () => {
                reject(new UserClosedWindowError());
            });
            function closeWin() {
                win.removeAllListeners('closed');
                setImmediate(() => {
                    win.close();
                });
            }
            win.webContents.on('did-navigate', (_event, newUrl) => {
                const parsed = url.parse(newUrl, true);
                if (parsed.query.error) {
                    reject(new Error(parsed.query.error_description));
                    closeWin();
                }
                else if (parsed.query.code) {
                    resolve(parsed.query.code);
                    closeWin();
                }
            });
            win.on('page-title-updated', () => {
                setImmediate(() => {
                    const title = win.getTitle();
                    if (title.startsWith('Denied')) {
                        reject(new Error(title.split(/[ =]/)[2]));
                        closeWin();
                    }
                    else if (title.startsWith('Success')) {
                        resolve(title.split(/[ =]/)[2]);
                        closeWin();
                    }
                });
            });
        });
    }
    /**
     * Get Google tokens for given scopes
     * @param {boolean} forceAddSession
     * @returns {Promise<Credentials>}
     */
    openAuthWindowAndGetTokens(forceAddSession = false) {
        return this
            .getAuthorizationCode(forceAddSession)
            .then((authorizationCode) => {
            return this.oauth2Client
                .getToken(authorizationCode)
                .then(response => {
                this.oauth2Client.setCredentials(response.tokens);
                return response.tokens;
            });
        });
    }
    setTokens(tokens) {
        this.oauth2Client.setCredentials(tokens);
    }
}
exports.ElectronGoogleOAuth2 = ElectronGoogleOAuth2;
